package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/tmc/cudalive/graph/model"
)

// CreateCodeSnippet is the resolver for the createCodeSnippet field.
func (r *mutationResolver) CreateCodeSnippet(ctx context.Context, content string) (*model.CodeSnippet, error) {
	panic(fmt.Errorf("not implemented: CreateCodeSnippet - createCodeSnippet"))
}

// UpdateCodeSnippet is the resolver for the updateCodeSnippet field.
func (r *mutationResolver) UpdateCodeSnippet(ctx context.Context, id string, content string) (*model.CodeSnippet, error) {
	panic(fmt.Errorf("not implemented: UpdateCodeSnippet - updateCodeSnippet"))
}

// DeleteCodeSnippet is the resolver for the deleteCodeSnippet field.
func (r *mutationResolver) DeleteCodeSnippet(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCodeSnippet - deleteCodeSnippet"))
}

// GenerateExplanation is the resolver for the generateExplanation field.
func (r *mutationResolver) GenerateExplanation(ctx context.Context, codeSnippetID string) (*model.Explanation, error) {
	panic(fmt.Errorf("not implemented: GenerateExplanation - generateExplanation"))
}

// GetCodeSnippet is the resolver for the getCodeSnippet field.
func (r *queryResolver) GetCodeSnippet(ctx context.Context, id string) (*model.CodeSnippet, error) {
	panic(fmt.Errorf("not implemented: GetCodeSnippet - getCodeSnippet"))
}

// GetAllCodeSnippets is the resolver for the getAllCodeSnippets field.
func (r *queryResolver) GetAllCodeSnippets(ctx context.Context) ([]*model.CodeSnippet, error) {
	panic(fmt.Errorf("not implemented: GetAllCodeSnippets - getAllCodeSnippets"))
}

// GetCompilationResult is the resolver for the getCompilationResult field.
func (r *queryResolver) GetCompilationResult(ctx context.Context, id string) (*model.CompilationResult, error) {
	panic(fmt.Errorf("not implemented: GetCompilationResult - getCompilationResult"))
}

// GetExplanation is the resolver for the getExplanation field.
func (r *queryResolver) GetExplanation(ctx context.Context, id string) (*model.Explanation, error) {
	panic(fmt.Errorf("not implemented: GetExplanation - getExplanation"))
}

// CodeSnippetUpdated is the resolver for the codeSnippetUpdated field.
func (r *subscriptionResolver) CodeSnippetUpdated(ctx context.Context, id string) (<-chan *model.CodeSnippet, error) {
	panic(fmt.Errorf("not implemented: CodeSnippetUpdated - codeSnippetUpdated"))
}

// CompilationResultUpdated is the resolver for the compilationResultUpdated field.
func (r *subscriptionResolver) CompilationResultUpdated(ctx context.Context, codeSnippetID string) (<-chan *model.CompilationResult, error) {
	panic(fmt.Errorf("not implemented: CompilationResultUpdated - compilationResultUpdated"))
}

// ErrorOccurred is the resolver for the errorOccurred field.
func (r *subscriptionResolver) ErrorOccurred(ctx context.Context, codeSnippetID string) (<-chan *model.Error, error) {
	panic(fmt.Errorf("not implemented: ErrorOccurred - errorOccurred"))
}

// ExplanationGenerated is the resolver for the explanationGenerated field.
func (r *subscriptionResolver) ExplanationGenerated(ctx context.Context, codeSnippetID string) (<-chan *model.Explanation, error) {
	panic(fmt.Errorf("not implemented: ExplanationGenerated - explanationGenerated"))
}

// GenericCompletion is the resolver for the genericCompletion field.
func (r *subscriptionResolver) GenericCompletion(ctx context.Context, prompt string) (<-chan *model.CompletionChunk, error) {
	return r.genericCompletion(ctx, prompt)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
