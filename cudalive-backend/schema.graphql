type CodeSnippet {
  id: ID!
  content: String!
  language: Language!
  createdAt: String!
  updatedAt: String!
  compilationResult: CompilationResult
}

enum Language {
  PYTHON
  TRITON
}

type CompilationResult {
  id: ID!
  codeSnippetId: ID!
  output: String!
  status: CompilationStatus!
  errorMessage: String
  createdAt: String!
}

enum CompilationStatus {
  PENDING
  COMPLETED
  FAILED
}

type ConversionHistory {
  id: ID!
  conversionRequest: TritonConversionRequest!
  tritonCode: String!
  timestamp: String!
}

type Query {
  getCodeSnippet(id: ID!): CodeSnippet
  getAllCodeSnippets: [CodeSnippet!]!
  getCompilationResult(id: ID!): CompilationResult
  getConversionHistory: [ConversionHistory!]!
}

type Mutation {
  createCodeSnippet(content: String!, language: Language!): CodeSnippet!
  updateCodeSnippet(id: ID!, content: String!): CodeSnippet!
  deleteCodeSnippet(id: ID!): Boolean!
  compileCodeSnippet(id: ID!): CompilationResult!
  saveConversion(pythonCode: String!, tritonCode: String!): ConversionHistory!
}

type Subscription {
  codeSnippetUpdated(id: ID!): CodeSnippet!
  compilationResultUpdated(codeSnippetId: ID!): CompilationResult!
  convertPythonToTriton(input: TritonConversionRequestInput!): TritonConversionResult!
  genericCompletion(prompt: String!): CompletionChunk
}

input TritonConversionRequestInput {
  pythonVersion: String!
  pythonPackages: [String!]!
  pythonCode: String!
}

type TritonConversionRequest {
  pythonVersion: String!
  pythonPackages: [String!]!
  pythonCode: String!
}

type CompletionChunk {
  text: String!
  isLast: Boolean!
}

enum UpdateType {
  INITIALIZATION
  ENVIRONMENT_SETUP
  PACKAGE_INSTALLATION
  CONVERSION_PROGRESS
  COMPLETION
  ERROR
}

type TritonConversionResult {
  type: UpdateType!
  message: String!
  isError: Boolean!
  isComplete: Boolean!
  timestamp: String!
  progress: Float
  tritonCode: String
}
